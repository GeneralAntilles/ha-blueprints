blueprint:
  name: "Advanced Motion and Door Lighting Control"
  description: "Control lights based on motion and door sensors with sun-based schedule and override switches"
  domain: automation
  input:
    motion_sensors:
      name: Motion Sensors
      description: "Select one or more motion sensors"
      selector:
        target:
          entity:
            domain: binary_sensor
            device_class: motion
    door_sensors:
      name: Door Sensors
      description: "Optional door sensors that will also trigger lights"
      selector:
        target:
          entity:
            domain: binary_sensor
            device_class: door
      default: []
    controlled_entities:
      name: Controlled Entities
      description: "Lights or scenes to be controlled"
      selector:
        target:
          entity:
            domain:
              - light
              - scene
              - switch
    override_input_boolean:
      name: Override Switch
      description: "Input boolean to disable motion/door control"
      selector:
        entity:
          domain: input_boolean
    sun_entity:
      name: Sun Entity
      description: "Entity to check for day/night"
      selector:
        entity:
          domain: sun
      default: sun.sun
    debug_mode:
      name: Debug Mode
      description: "Enable debug logging"
      selector:
        boolean:
      default: false
    no_motion_wait:
      name: Turn Off Delay
      description: "Seconds to wait before turning off after no motion/door activity"
      selector:
        number:
          min: 0
          max: 3600
          unit_of_measurement: seconds
      default: 300
    turn_on_transition:
      name: Turn On Transition
      description: "Transition time in seconds when turning on (ignored for scenes)"
      selector:
        number:
          min: 0
          max: 30
          unit_of_measurement: seconds
      default: 1
    turn_off_transition:
      name: Turn Off Transition
      description: "Transition time in seconds when turning off (ignored for scenes)"
      selector:
        number:
          min: 0
          max: 30
          unit_of_measurement: seconds
      default: 2

trigger:
  - platform: state
    entity_id: !input motion_sensors
    to: "on"
    id: "motion_on"
  - platform: state
    entity_id: !input motion_sensors
    to: "off"
    id: "motion_off"
  - platform: state
    entity_id: !input door_sensors
    to: "on"
    id: "door_on"
  - platform: state
    entity_id: !input door_sensors
    to: "off"
    id: "door_off"
  - platform: homeassistant
    event: start
    id: "ha_start"

variables:
  timer_name: "motion_light_timer"
  is_motion_active: >-
    {% set motion_active = false %}
    {% set motion_states = expand(input.motion_sensors) | map(attribute='state') | list %}
    {% for state in motion_states %}
      {% if state == 'on' %}
        {% set motion_active = true %}
      {% endif %}
    {% endfor %}
    {{ motion_active }}
  is_door_active: >-
    {% set door_active = false %}
    {% if input.door_sensors %}
      {% set door_states = expand(input.door_sensors) | map(attribute='state') | list %}
      {% for state in door_states %}
        {% if state == 'on' %}
          {% set door_active = true %}
        {% endif %}
      {% endfor %}
    {% endif %}
    {{ door_active }}
  any_entity_on: >-
    {% set entities = expand(input.controlled_entities) %}
    {% for entity in entities %}
      {% if entity.state == 'on' %}
        {% set ns.found = true %}
      {% endif %}
    {% endfor %}
    {{ ns.found | default(false) }}
  should_use_transition: >-
    {% set use_transition = true %}
    {% set entities = expand(input.controlled_entities) %}
    {% for entity in entities %}
      {% if entity.domain == 'scene' %}
        {% set use_transition = false %}
      {% endif %}
    {% endfor %}
    {{ use_transition }}

action:
  # Debug logging
  - if:
      - condition: template
        value_template: "{{ input.debug_mode }}"
    then:
      - service: system_log.write
        data:
          message: "Motion Light Debug - Trigger: {{ trigger.id }}, Motion Active: {{ is_motion_active }}, Door Active: {{ is_door_active }}"
          level: debug

  # Handle HA startup
  - if:
      - condition: trigger
        id: "ha_start"
      - condition: template
        value_template: >
          {% set override_state = states(input.override_input_boolean) %}
          {{ override_state == 'off' }}
      - condition: template
        value_template: "{{ not is_motion_active and not is_door_active }}"
    then:
      - service: homeassistant.turn_off
        target: !input controlled_entities
        data:
          transition: "{{ input.turn_off_transition if should_use_transition else 0 }}"

  # Check override state
  - condition: template
    value_template: >
      {% set override_state = states(input.override_input_boolean) %}
      {{ override_state == 'off' }}

  # Sun check
  - condition: template
    value_template: "{{ states(input.sun_entity) == 'below_horizon' }}"

  # Main action logic
  - choose:
      # Handle motion/door ON triggers
      - conditions:
          - condition: or
            conditions:
              - condition: trigger
                id: "motion_on"
              - condition: trigger
                id: "door_on"
          - condition: template
            value_template: "{{ not any_entity_on }}"
        sequence:
          - service: homeassistant.turn_on
            target: !input controlled_entities
            data:
              transition: "{{ input.turn_on_transition if should_use_transition else 0 }}"

      # Handle motion OFF trigger
      - conditions:
          - condition: trigger
            id: "motion_off"
          - condition: template
            value_template: "{{ any_entity_on }}"
          # Only start timer if no door is active
          - condition: template
            value_template: "{{ not is_door_active }}"
        sequence:
          - delay:
              seconds: "{{ current_delay }}"
          # Double check nothing is active before turning off
          - condition: template
            value_template: "{{ not is_motion_active and not is_door_active }}"
          - service: homeassistant.turn_off
            target: !input controlled_entities
            data:
              transition: "{{ input.turn_off_transition if should_use_transition else 0 }}"

      # Handle door OFF trigger
      - conditions:
          - condition: trigger
            id: "door_off"
          - condition: template
            value_template: "{{ any_entity_on }}"
          # Only start timer if no motion is active
          - condition: template
            value_template: "{{ not is_motion_active }}"
        sequence:
          - delay:
              seconds: "{{ current_delay }}"
          # Double check nothing is active before turning off
          - condition: template
            value_template: "{{ not is_motion_active and not is_door_active }}"
          - service: homeassistant.turn_off
            target: !input controlled_entities
            data:
              transition: "{{ input.turn_off_transition if should_use_transition else 0 }}"
