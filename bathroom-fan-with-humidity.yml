blueprint:
  name: Bathroom Fan Control with Humidity Management
  description: Controls a bathroom fan based on switch state and humidity levels with minimum runtime
  domain: automation
  input:
    fan_switch:
      name: Fan Switch
      description: "The switch entity for the bathroom fan"
      selector:
        entity:
          domain: switch
    humidity_sensor:
      name: Humidity Sensor
      selector:
        entity:
          domain: sensor
          device_class: humidity
    humidity_high_threshold:
      name: High Humidity Threshold
      description: "Humidity percentage that will trigger the fan (default: 50)"
      default: 50
      selector:
        number:
          min: 0
          max: 100
          unit_of_measurement: "%"
    minimum_run_time:
      name: Minimum Run Time
      description: "Minimum time in minutes the fan should run after manual activation (default: 15)"
      default: 15
      selector:
        number:
          min: 1
          max: 60
          unit_of_measurement: "minutes"

trigger:
  # Trigger on any state change of the fan switch
  - platform: state
    entity_id: !input fan_switch
    id: switch_trigger

  # Trigger on humidity changes
  - platform: numeric_state
    entity_id: !input humidity_sensor
    id: humidity_high
    above: !input humidity_high_threshold

  - platform: numeric_state
    entity_id: !input humidity_sensor
    id: humidity_low
    below: !input humidity_high_threshold

variables:
  humidity_threshold: !input humidity_high_threshold
  min_run_time_sec: "{{ (input.minimum_run_time | int * 60) | int }}"

action:
  - variables:
      trigger_type: "{{ trigger.id }}"
      is_switch_on: "{{ trigger.to_state.state == 'on' if trigger.to_state is defined else states(fan_switch) == 'on' }}"
      current_humidity: "{{ states(humidity_sensor) | float }}"

  - choose:
      # Handle switch turned ON
      - conditions:
          - condition: template
            value_template: "{{ trigger_type == 'switch_trigger' and is_switch_on }}"
        sequence:
          - delay:
              seconds: "{{ min_run_time_sec }}"
          - if:
              condition: numeric_state
              entity_id: !input humidity_sensor
              below: !input humidity_high_threshold
            then:
              - service: switch.turn_off
                target:
                  entity_id: !input fan_switch

      # Handle humidity high
      - conditions:
          - condition: template
            value_template: "{{ trigger_type == 'humidity_high' }}"
        sequence:
          - service: switch.turn_on
            target:
              entity_id: !input fan_switch

      # Handle humidity low
      - conditions:
          - condition: template
            value_template: "{{ trigger_type == 'humidity_low' and states(fan_switch) == 'on' }}"
        sequence:
          - service: switch.turn_off
            target:
              entity_id: !input fan_switch

mode: restart
