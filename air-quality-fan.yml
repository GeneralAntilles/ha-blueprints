blueprint:
  name: Air Quality-Based Fan Control
  description: Control fans based on AirGradient sensor readings for CO2, PM2.5, and TVOC
  domain: automation
  input:
    air_quality_sensor:
      name: AirGradient Sensor
      description: Select your AirGradient sensor
      selector:
        entity:
          domain: sensor
    co2_threshold:
      name: CO2 Threshold (ppm)
      description: CO2 level above which fans should activate
      default: 1000
      selector:
        number:
          min: 400
          max: 5000
          unit_of_measurement: ppm
    pm25_threshold:
      name: PM2.5 Threshold (μg/m³)
      description: PM2.5 level above which fans should activate
      default: 35
      selector:
        number:
          min: 0
          max: 500
          unit_of_measurement: μg/m³
    tvoc_threshold:
      name: TVOC Threshold (ppb)
      description: TVOC level above which fans should activate
      default: 250
      selector:
        number:
          min: 0
          max: 2000
          unit_of_measurement: ppb
    fan_entities:
      name: Fans to Control
      description: Select the fans to control
      selector:
        target:
          entity:
            domain: fan
    switch_entities:
      name: Additional Switches
      description: Optional switches to control (like window motors)
      selector:
        target:
          entity:
            domain: switch
      default: {}
    delay_before_off:
      name: Delay Before Turning Off
      description: Time to wait after levels drop before turning off fans (in minutes)
      default: 5
      selector:
        number:
          min: 1
          max: 60
          unit_of_measurement: minutes

trigger:
  - platform: state
    entity_id: !input air_quality_sensor
  - platform: numeric_state
    entity_id:
      - sensor.airgradient_co2
      - sensor.airgradient_pm25
      - sensor.airgradient_tvoc
    above:
      - !input co2_threshold
      - !input pm25_threshold
      - !input tvoc_threshold
  - platform: numeric_state
    entity_id:
      - sensor.airgradient_co2
      - sensor.airgradient_pm25
      - sensor.airgradient_tvoc
    below:
      - !input co2_threshold
      - !input pm25_threshold
      - !input tvoc_threshold

condition: []

action:
  - choose:
      - conditions:
          - condition: or
            conditions:
              - condition: numeric_state
                entity_id: sensor.airgradient_co2
                above: !input co2_threshold
              - condition: numeric_state
                entity_id: sensor.airgradient_pm25
                above: !input pm25_threshold
              - condition: numeric_state
                entity_id: sensor.airgradient_tvoc
                above: !input tvoc_threshold
        sequence:
          - service: fan.turn_on
            target: !input fan_entities
          - service: switch.turn_on
            target: !input switch_entities
    default:
      - wait_for:
          - condition: and
            conditions:
              - condition: numeric_state
                entity_id: sensor.airgradient_co2
                below: !input co2_threshold
              - condition: numeric_state
                entity_id: sensor.airgradient_pm25
                below: !input pm25_threshold
              - condition: numeric_state
                entity_id: sensor.airgradient_tvoc
                below: !input tvoc_threshold
      - delay:
          minutes: !input delay_before_off
      - service: fan.turn_off
        target: !input fan_entities
      - service: switch.turn_off
        target: !input switch_entities

mode: single
